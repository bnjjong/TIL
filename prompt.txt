4.4 챕터와 그 하위챕터 내용을 정리해주고 마지막에 요약으로 다시 압축해줘.
그리고 해당 내용을 바탕으로 예제 코드까지 kotlin 으로 작성해줘.
예제 코드는 as-is to-be 형태로 해줬으면 좋겠어.
추가로 예제 코드는 비지니스 즉 도메인이 있는 로직이였으면 좋겠어.

그리고 문서의 포맷은 아래와 같이 마크다운 형태로 맞춰 줄래? 샘플 코드의 경우 많을 수록 좋아.

하위 샘플 문서
## 4.3 세 번째 요소와 네 번째 요소: 빠른 피드백과 유지 보수성

### 빠른 피드백
- 단위 테스트의 필수 속성이다[1].

### 유지 보수성
- 테스트 코드의 유지비를 평가하는 요소이다[1].
- 테스트가 이해하기 쉽고, 변경이 쉬울수록 유지 보수성이 높다[1].

### 요약
- 빠른 피드백과 유지 보수성은 단위 테스트의 핵심적인 두 가지 요소로, 테스트의 실행 빈도와 유지 비용에 직접적인 영향을 준다[1].


### 샘플 코드 1
- **as-is: 유지 보수성이 낮은 테스트 예시**
```kotlin
class OrderServiceTest {

    @Test
    fun testOrderProcess() {
        val warehouse = Warehouse()
        warehouse.add("Macbook", 10)
        val order = Order("Macbook", 5)
        order.fill(warehouse)
        assertTrue(order.isFilled())
        assertEquals(5, warehouse.getInventory("Macbook"))

}
```
- 여러 시나리오가 한 테스트에 섞여 있어 실패 시 원인 파악이 어렵고, 유지 보수성이 떨어진다[1].

### 샘플 코드 2
- **to-be: 빠른 피드백과 유지 보수성을 높인 테스트 예시**
```kotlin
class OrderServiceTest {

    private lateinit var warehouse: Warehouse

    @BeforeEach
    fun setup() {
        warehouse = Warehouse()
        warehouse.add("Macbook", 10)
    }


}
```
- 각 테스트가 하나의 규칙만 검증하여 빠른 피드백을 제공하고, 의미 있는 테스트명과 공통 준비 코드 분리로 유지 보수성이 높다[1].


### 결론
- 빠른 피드백과 유지 보수성은 단위 테스트의 실질적 가치를 좌우하는 핵심 요소다[1].


### 내 생각
여긴 내가 적는 공간 (여긴 비워둬)

## 출처
[1] image.jpg https://pplx-res.cloudinary.com/image/upload/v1750026627/user_uploads/32004849/83134302-5dbb-471c-9015-5276c3498e07/image.jpg

